<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiniur的博客</title>
  <subtitle>虽盘桓，志行正也</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiniur.ga/"/>
  <updated>2016-11-25T06:59:24.000Z</updated>
  <id>http://xiniur.ga/</id>
  
  <author>
    <name>Xiniur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS关联（Associative References）</title>
    <link href="http://xiniur.ga/2016/11/24/iOS%E5%85%B3%E8%81%94%EF%BC%88Associative%20References%EF%BC%89/"/>
    <id>http://xiniur.ga/2016/11/24/iOS关联（Associative References）/</id>
    <published>2016-11-24T07:25:06.000Z</published>
    <updated>2016-11-25T06:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Objective-C-Runtime-Associative-References"><a href="#Objective-C-Runtime-Associative-References" class="headerlink" title="Objective-C Runtime(Associative References)"></a>Objective-C Runtime(Associative References)</h3><pre><code class="objectivec"><span class="comment">// Sets an associated value for a given object using a given key and association policy.</span>
OBJC_EXPORT <span class="keyword">void</span> objc_setAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key, <span class="keyword">id</span> value, objc_AssociationPolicy policy)
    OBJC_AVAILABLE(<span class="number">10.6</span>, <span class="number">3.1</span>, <span class="number">9.0</span>, <span class="number">1.0</span>);

<span class="comment">// Returns the value associated with a given object for a given key.</span>
OBJC_EXPORT <span class="keyword">id</span> objc_getAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key)
    OBJC_AVAILABLE(<span class="number">10.6</span>, <span class="number">3.1</span>, <span class="number">9.0</span>, <span class="number">1.0</span>);

<span class="comment">// Removes all associations for a given object.</span>
<span class="comment">// The main purpose of this function is to make it easy to return an object to a "pristine state”. You should not use this function for general removal of associations from objects, since it also removes associations that other clients may have added to the object. Typically you should use objc_setAssociatedObject(_:_:_:_:) with a nil value to clear an association.</span>
OBJC_EXPORT <span class="keyword">void</span> objc_removeAssociatedObjects(<span class="keyword">id</span> object)
    OBJC_AVAILABLE(<span class="number">10.6</span>, <span class="number">3.1</span>, <span class="number">9.0</span>, <span class="number">1.0</span>);
</code></pre>
<h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><p>object: 关联的源对象。<br>key: 相当于NSDictionary的键，不同的是关联对象是通过判断两个key的地址是否相等而不是具体的值来比较。<br>value: 关联的对象。<br>objc_AssociationPolicy: 与声明属性对应的内存管理方式。</p>
<table>
<thead>
<tr>
<th>objc_AssociationPolicy</th>
<th style="text-align:center">@property</th>
</tr>
</thead>
<tbody>
<tr>
<td>OBJC_ASSOCIATION_ASSIGN</td>
<td style="text-align:center">(assign)</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>
<td style="text-align:center">(nonatomic, retain)</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY_NONATOMIC</td>
<td style="text-align:center">(nonatomic, copy)</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN</td>
<td style="text-align:center">(retain)</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY</td>
<td style="text-align:center">(copy)</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>　　iOS关联，在不用继承的情况下将现有的两个对象关联起来。如果给现有的类存放一些额外信息，通常是继承一个类，然后定义新增加的属性，然而也可以通过关联给这个对象一个属性，而不用新加子类，在不用继承的情况下将现有的两个对象关联起来，可以对已有的类添加属性。</p>
<pre><code class="objectivec"><span class="keyword">static</span> <span class="keyword">char</span> key;
<span class="comment">//关联的对象</span>
<span class="built_in">NSString</span> *value = <span class="string">@"我是关联的对象"</span>;
<span class="comment">//关联的源对象</span>
<span class="built_in">NSObject</span> *obj = [[<span class="built_in">NSObject</span> alloc] init];

objc_setAssociatedObject(obj, &amp;key,value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);

<span class="built_in">NSString</span> *result = objc_getAssociatedObject(obj, &amp;key);

<span class="built_in">NSLog</span>(<span class="string">@"value = %@ result = %@"</span>, value, result);
</code></pre>
<p>　　关联还可以给对象增加属性，使Category不仅可以为现有类增加方法，还可以增加实例属性。</p>
<pre><code class="objectivec"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span>

<span class="class"><span class="keyword">@interface</span> <span class="title">UILabel</span> (<span class="title">Associate</span>)</span>

<span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *placeholderColor;

<span class="keyword">@end</span>
</code></pre>
<pre><code class="objectivec"><span class="meta">#import <span class="meta-string">"UILabel+Associate.h"</span></span>
<span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span>

<span class="keyword">static</span> <span class="keyword">char</span> placeholderKey;

<span class="class"><span class="keyword">@implementation</span> <span class="title">UILabel</span> (<span class="title">Associate</span>)</span>

- (<span class="keyword">void</span>)setPlaceholderColor:(<span class="built_in">UIColor</span> *)placeholderColor
{
    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;placeholderKey, placeholderColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (<span class="built_in">UIColor</span> *)placeholderColor
{
    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;placeholderKey);
}

<span class="keyword">@end</span>
</code></pre>
<p>　　还可以关联一个block来简化代码。</p>
<pre><code class="objectivec"><span class="keyword">static</span> <span class="keyword">char</span> alertViewKey;

- (<span class="keyword">void</span>)showAlert {
    <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc]initWithTitle:<span class="string">@"提示"</span> message:<span class="string">@"我是关联block"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"取消"</span> otherButtonTitles:<span class="string">@"确定"</span>, <span class="literal">nil</span>];

    <span class="keyword">void</span> (^alertBlock)(<span class="built_in">NSInteger</span>) = ^(<span class="built_in">NSInteger</span> buttonIndex) {
        <span class="built_in">NSLog</span>(<span class="string">@"我是关联block buttonIndex = %ld"</span>, (<span class="keyword">long</span>)buttonIndex);
    };

    objc_setAssociatedObject(alert, &amp;alertViewKey, alertBlock, OBJC_ASSOCIATION_COPY);<span class="comment">//将block 与alert关联</span>

    [alert show];
}

-(<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex
{   
    <span class="keyword">void</span>(^ alertBlock)(<span class="built_in">NSInteger</span>) = objc_getAssociatedObject(alertView, &amp;alertViewKey);
    alertBlock(buttonIndex);
}
</code></pre>
<h3 id="断开关联"><a href="#断开关联" class="headerlink" title="断开关联"></a>断开关联</h3><p>　　使用<code>objc_removeAssociatedObjects</code>可以断开所有的关联，使用这个函数会断开所有的关联，把对象恢复到“原始状态”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Objective-C-Runtime-Associative-References&quot;&gt;&lt;a href=&quot;#Objective-C-Runtime-Associative-References&quot; class=&quot;headerlink&quot; title=&quot;Objective-C Runtime(Associative References)&quot;&gt;&lt;/a&gt;Objective-C Runtime(Associative References)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Sets an associated value for a given object using a given key and association policy.&lt;/span&gt;
OBJC_EXPORT &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; object, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value, objc_AssociationPolicy policy)
    OBJC_AVAILABLE(&lt;span class=&quot;number&quot;&gt;10.6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// Returns the value associated with a given object for a given key.&lt;/span&gt;
OBJC_EXPORT &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; objc_getAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; object, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key)
    OBJC_AVAILABLE(&lt;span class=&quot;number&quot;&gt;10.6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// Removes all associations for a given object.&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// The main purpose of this function is to make it easy to return an object to a &quot;pristine state”. You should not use this function for general removal of associations from objects, since it also removes associations that other clients may have added to the object. Typically you should use objc_setAssociatedObject(_:_:_:_:) with a nil value to clear an association.&lt;/span&gt;
OBJC_EXPORT &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; objc_removeAssociatedObjects(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; object)
    OBJC_AVAILABLE(&lt;span class=&quot;number&quot;&gt;10.6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;参数解释&quot;&gt;&lt;a href=&quot;#参数解释&quot; class=&quot;headerlink&quot; title=&quot;参数解释&quot;&gt;&lt;/a&gt;参数解释&lt;/h3&gt;&lt;p&gt;object: 关联的源对象。&lt;br&gt;key: 相当于NSDictionary的键，不同的是关联对象是通过判断两个key的地址是否相等而不是具体的值来比较。&lt;br&gt;value: 关联的对象。&lt;br&gt;objc_AssociationPolicy: 与声明属性对应的内存管理方式。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;objc_AssociationPolicy&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;@property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OBJC_ASSOCIATION_ASSIGN&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(assign)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OBJC_ASSOCIATION_RETAIN_NONATOMIC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(nonatomic, retain)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OBJC_ASSOCIATION_COPY_NONATOMIC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(nonatomic, copy)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OBJC_ASSOCIATION_RETAIN&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(retain)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OBJC_ASSOCIATION_COPY&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(copy)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="记录" scheme="http://xiniur.ga/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="iOS" scheme="http://xiniur.ga/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://xiniur.ga/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Cannot find module DTraceProviderBindings</title>
    <link href="http://xiniur.ga/2016/11/11/hexo_module_not_found/"/>
    <id>http://xiniur.ga/2016/11/11/hexo_module_not_found/</id>
    <published>2016-11-11T08:42:49.000Z</published>
    <updated>2016-11-22T03:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="针对这个错误网上解决办法贴的很多，却都没有解决我的问题，最终使用此办法："><a href="#针对这个错误网上解决办法贴的很多，却都没有解决我的问题，最终使用此办法：" class="headerlink" title="针对这个错误网上解决办法贴的很多，却都没有解决我的问题，最终使用此办法："></a>针对这个错误网上解决办法贴的很多，却都没有解决我的问题，最终使用此办法：</h3><pre><code class="bash">$ sudo npm uninstall -g hexo-cli
$ sudo npm install -g hexo-cli
</code></pre>
<h3 id="解决办法如下："><a href="#解决办法如下：" class="headerlink" title="解决办法如下："></a>解决办法如下：</h3><p>　　网上无数答案，最靠谱的办法：</p>
<pre><code class="bash">$ npm install hexo --no-optional
</code></pre>
<p>　　然而，执行了之后没有效果，再找：</p>
<pre><code class="bash">$ npm uninstall hexo
$ npm install hexo --no-optional
</code></pre>
<p>　　并没有什么用，坚持不放弃，重装hexo-cli：</p>
<pre><code class="bash">$ npm uninstall -g hexo-cli
$ npm install -g hexo-cli
</code></pre>
<a id="more"></a> 
<p>　　卸载时出现以下结果：</p>
<pre><code class="bash">npm ERR! Darwin 16.1.0
npm ERR! argv <span class="string">"/usr/local/bin/node"</span> <span class="string">"/usr/local/bin/npm"</span> <span class="string">"uninstall"</span> <span class="string">"-g"</span> <span class="string">"hexo-cli"</span>
npm ERR! node v7.0.0
npm ERR! npm  v3.10.8
npm ERR! path /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/ansi-regex
npm ERR! code EACCES
npm ERR! errno -13
npm ERR! syscall access

npm ERR! Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/ansi-regex'</span>
npm ERR!  { Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/ansi-regex'</span>
npm ERR!   errno: -13,
npm ERR!   code: <span class="string">'EACCES'</span>,
npm ERR!   syscall: <span class="string">'access'</span>,
npm ERR!   path: <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/ansi-regex'</span> }
npm ERR! 
npm ERR! Please try running this <span class="built_in">command</span> again as root/Administrator.
</code></pre>
<p>　　使用sudo，输入password，完美执行：</p>
<pre><code class="bash">$ sudo npm uninstall -g hexo-cli
$ sudo npm install -g hexo-cli
</code></pre>
<p>　　一试之下，顿觉开朗，不再报错，完美解决问题：</p>
<pre><code class="bash">$ hexo --version
hexo: 3.2.2
hexo-cli: 1.0.2
os: Darwin 16.1.0 darwin x64
http_parser: 2.7.0
node: 7.0.0
v8: 5.4.500.36
uv: 1.9.1
zlib: 1.2.8
ares: 1.10.1-DEV
icu: 57.1
modules: 51
openssl: 1.0.2j
</code></pre>
<h3 id="错误说明："><a href="#错误说明：" class="headerlink" title="错误说明："></a>错误说明：</h3><pre><code class="bash">$ hexo --version
{ Error: Cannot find module <span class="string">'./build/Release/DTraceProviderBindings'</span>
    at Function.Module._resolveFilename (module.js:472:15)
    at Function.Module._load (module.js:420:25)
    at Module.require (module.js:500:17)
    at require (internal/module.js:20:19)
    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32)
    at tryModuleLoad (module.js:449:12)
    at Function.Module._load (module.js:441:3)
    at Module.require (module.js:500:17)
    at require (internal/module.js:20:19)
    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32) code: <span class="string">'MODULE_NOT_FOUND'</span> }
{ Error: Cannot find module <span class="string">'./build/default/DTraceProviderBindings'</span>
    at Function.Module._resolveFilename (module.js:472:15)
    at Function.Module._load (module.js:420:25)
    at Module.require (module.js:500:17)
    at require (internal/module.js:20:19)
    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32)
    at tryModuleLoad (module.js:449:12)
    at Function.Module._load (module.js:441:3)
    at Module.require (module.js:500:17)
    at require (internal/module.js:20:19)
    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32) code: <span class="string">'MODULE_NOT_FOUND'</span> }
{ Error: Cannot find module <span class="string">'./build/Debug/DTraceProviderBindings'</span>
    at Function.Module._resolveFilename (module.js:472:15)
    at Function.Module._load (module.js:420:25)
    at Module.require (module.js:500:17)
    at require (internal/module.js:20:19)
    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32)
    at tryModuleLoad (module.js:449:12)
    at Function.Module._load (module.js:441:3)
    at Module.require (module.js:500:17)
    at require (internal/module.js:20:19)
    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)
    at Module._compile (module.js:573:32)
    at Object.Module._extensions..js (module.js:582:10)
    at Module.load (module.js:490:32) code: <span class="string">'MODULE_NOT_FOUND'</span> }
hexo: 3.2.2
hexo-cli: 1.0.2
os: Darwin 16.1.0 darwin x64
http_parser: 2.7.0
node: 7.0.0
v8: 5.4.500.36
uv: 1.9.1
zlib: 1.2.8
ares: 1.10.1-DEV
icu: 57.1
modules: 51
openssl: 1.0.2j
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;针对这个错误网上解决办法贴的很多，却都没有解决我的问题，最终使用此办法：&quot;&gt;&lt;a href=&quot;#针对这个错误网上解决办法贴的很多，却都没有解决我的问题，最终使用此办法：&quot; class=&quot;headerlink&quot; title=&quot;针对这个错误网上解决办法贴的很多，却都没有解决我的问题，最终使用此办法：&quot;&gt;&lt;/a&gt;针对这个错误网上解决办法贴的很多，却都没有解决我的问题，最终使用此办法：&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ sudo npm uninstall -g hexo-cli
$ sudo npm install -g hexo-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;解决办法如下：&quot;&gt;&lt;a href=&quot;#解决办法如下：&quot; class=&quot;headerlink&quot; title=&quot;解决办法如下：&quot;&gt;&lt;/a&gt;解决办法如下：&lt;/h3&gt;&lt;p&gt;　　网上无数答案，最靠谱的办法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ npm install hexo --no-optional
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　　然而，执行了之后没有效果，再找：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ npm uninstall hexo
$ npm install hexo --no-optional
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　　并没有什么用，坚持不放弃，重装hexo-cli：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ npm uninstall -g hexo-cli
$ npm install -g hexo-cli
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://xiniur.ga/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈NS_ENUM &amp; NS_OPTIONS</title>
    <link href="http://xiniur.ga/2016/11/11/%E8%B0%88%E4%B8%80%E8%B0%88NS_ENUM&amp;NS_OPTIONS/"/>
    <id>http://xiniur.ga/2016/11/11/谈一谈NS_ENUM&amp;NS_OPTIONS/</id>
    <published>2016-11-11T08:33:08.000Z</published>
    <updated>2016-11-22T08:01:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>　　enum枚举类型为预设值定义常量，没有被赋值的会自动从0开始赋予连续的值。有几种常用的枚举类型定义方式，每种方法大致相同，却也有细微的区别，现在就来探究一下究竟有何不一样。</p>
<pre><code class="objectivec"><span class="keyword">enum</span> {
    MyEnumValueA,
    MyEnumValueB,
    MyEnumValueC,
};

<span class="keyword">typedef</span> <span class="keyword">enum</span> {
    MyEnumValueA,
    MyEnumValueB,
    MyEnumValueC,
} MyEnum;

<span class="keyword">typedef</span> <span class="keyword">enum</span> {
    MyEnumValueA,
    MyEnumValueB,
    MyEnumValueC,
};
<span class="keyword">typedef</span> <span class="built_in">NSInteger</span> MyEnum;
</code></pre>
<p>　　以上是之前的枚举类型，要么是定义了整型值，没有定义类型名，要么是没有定义类型名和enum什么关系，现在，枚举类型宏定义统一使用以下写法： </p>
<blockquote>
<p>enumdef - Enumerated Type Declaration </p>
</blockquote>
<a id="more"></a>
<pre><code class="objectivec"><span class="keyword">typedef</span> <span class="keyword">enum</span> : <span class="built_in">NSUInteger</span> {
    MyEnumValueA,
    MyEnumValueB,
    MyEnumValueC,
} MyEnum;
</code></pre>
<blockquote>
<p>nsenum - Enumerated Type Declaration (NS_ENUM)</p>
</blockquote>
<pre><code class="objectivec"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, MyEnum) {
    MyEnumValueA = <span class="number">0</span>,
    MyEnumValueB,
    MyEnumValueC,
};
</code></pre>
<p>　　这两种写法大致相同，都有两个参数，一个为值的类型，一个为枚举类型的名字，大括号里是要定义的枚举值，这种实现方法结合了之前版本的优点，写作也更加美观。<br>　　需要一提的是，还有另外一种枚举定义，NS_OPTIONS，使用位运算来赋值，其好处就是枚举值同时使用时仍具有唯一性，可使用或运算相加，位移不同位数得到的枚举值在二进制中代表不同的数位，不同的数位或运算的结果是唯一的。</p>
<blockquote>
<p>nsoptions - Enumerated Type Declaration (NS_OPTIONS) </p>
</blockquote>
<pre><code class="objectivec"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, MyEnum) {
    MyEnumValueA = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,
    MyEnumValueB = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,
    MyEnumValueC = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,
};
</code></pre>
<p>　　可以在多条件下使用NS_OPTIONS，在结果唯一互斥的情况下使用NS_ENUM。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;　　enum枚举类型为预设值定义常量，没有被赋值的会自动从0开始赋予连续的值。有几种常用的枚举类型定义方式，每种方法大致相同，却也有细微的区别，现在就来探究一下究竟有何不一样。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; {
    MyEnumValueA,
    MyEnumValueB,
    MyEnumValueC,
};

&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; {
    MyEnumValueA,
    MyEnumValueB,
    MyEnumValueC,
} MyEnum;

&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; {
    MyEnumValueA,
    MyEnumValueB,
    MyEnumValueC,
};
&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; MyEnum;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　　以上是之前的枚举类型，要么是定义了整型值，没有定义类型名，要么是没有定义类型名和enum什么关系，现在，枚举类型宏定义统一使用以下写法： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;enumdef - Enumerated Type Declaration &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://xiniur.ga/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://xiniur.ga/tags/Objective-C/"/>
    
      <category term="探究" scheme="http://xiniur.ga/tags/%E6%8E%A2%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Xcode8遇到的一些事</title>
    <link href="http://xiniur.ga/2016/10/18/Xcode8%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/"/>
    <id>http://xiniur.ga/2016/10/18/Xcode8遇到的一些事/</id>
    <published>2016-10-18T02:10:10.000Z</published>
    <updated>2016-11-22T05:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="普通账号真机调试"><a href="#普通账号真机调试" class="headerlink" title="普通账号真机调试"></a>普通账号真机调试</h3><p>　　普通开发者账号有了限制，每七天可以创建10个APP IDs，可以使用同一个Bundle Identifier来规避这个问题。</p>
<h3 id="Xcode杂乱无章日志"><a href="#Xcode杂乱无章日志" class="headerlink" title="Xcode杂乱无章日志"></a>Xcode杂乱无章日志</h3><p>　　Xcode8里边 Edit Scheme-&gt; Run -&gt; Arguments, 在Environment Variables里边添加<br>OS_ACTIVITY_MODE，value值设置为disable………..添加后点击Close。<br>如果写了之后还是打印log，请重新勾选对勾，就可以解决了。</p>
<h3 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h3><p>　　这个是因为苹果解决xcode ghost，把插件屏蔽了。<br>　　解决方法是打开终端，命令运行：</p>
<pre><code class="bash">$ sudo /usr/libexec/xpccachectl
</code></pre>
<p>　　然后必须重启电脑后生效。</p>
<p>　　注意：Xcode8内置了开启注释的功能 Editor-&gt;Structure-&gt;Add Documentation。<br><a id="more"></a> </p>
<h3 id="关于CAAnimationDelegate"><a href="#关于CAAnimationDelegate" class="headerlink" title="关于CAAnimationDelegate"></a>关于CAAnimationDelegate</h3><p>　　iOS9及以前: </p>
<pre><code class="objectivec"><span class="comment">/* Delegate methods for CAAnimation. */</span>

<span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">CAAnimationDelegate</span>)</span>

<span class="comment">/* Called when the animation begins its active duration. */</span>

- (<span class="keyword">void</span>)animationDidStart:(<span class="built_in">CAAnimation</span> *)anim;

<span class="comment">/* Called when the animation either completes its active duration or
 * is removed from the object it is attached to (i.e. the layer). 'flag'
 * is true if the animation reached the end of its active duration
 * without being removed. */</span>

- (<span class="keyword">void</span>)animationDidStop:(<span class="built_in">CAAnimation</span> *)anim finished:(<span class="built_in">BOOL</span>)flag;

<span class="keyword">@end</span>
</code></pre>
<p>　　iOS10:</p>
<pre><code class="objectivec"><span class="comment">/* Delegate methods for CAAnimation. */</span>

<span class="class"><span class="keyword">@protocol</span> <span class="title">CAAnimationDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span>
<span class="keyword">@optional</span>

<span class="comment">/* Called when the animation begins its active duration. */</span>

- (<span class="keyword">void</span>)animationDidStart:(<span class="built_in">CAAnimation</span> *)anim;

<span class="comment">/* Called when the animation either completes its active duration or
 * is removed from the object it is attached to (i.e. the layer). 'flag'
 * is true if the animation reached the end of its active duration
 * without being removed. */</span>

- (<span class="keyword">void</span>)animationDidStop:(<span class="built_in">CAAnimation</span> *)anim finished:(<span class="built_in">BOOL</span>)flag;

<span class="keyword">@end</span>
</code></pre>
<p>　　变化就是iOS10之前CAAnimationDelegate只是基类的分类方法，是扩展，iOS10之后变成了协议，那么适配就应该分版本配置：</p>
<pre><code class="objectivec"><span class="meta">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 100000</span>

<span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">CAAnimationDelegate</span>&gt;</span>

<span class="meta">#else</span>

<span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span>

<span class="meta">#endif</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;普通账号真机调试&quot;&gt;&lt;a href=&quot;#普通账号真机调试&quot; class=&quot;headerlink&quot; title=&quot;普通账号真机调试&quot;&gt;&lt;/a&gt;普通账号真机调试&lt;/h3&gt;&lt;p&gt;　　普通开发者账号有了限制，每七天可以创建10个APP IDs，可以使用同一个Bundle Identifier来规避这个问题。&lt;/p&gt;
&lt;h3 id=&quot;Xcode杂乱无章日志&quot;&gt;&lt;a href=&quot;#Xcode杂乱无章日志&quot; class=&quot;headerlink&quot; title=&quot;Xcode杂乱无章日志&quot;&gt;&lt;/a&gt;Xcode杂乱无章日志&lt;/h3&gt;&lt;p&gt;　　Xcode8里边 Edit Scheme-&amp;gt; Run -&amp;gt; Arguments, 在Environment Variables里边添加&lt;br&gt;OS_ACTIVITY_MODE，value值设置为disable………..添加后点击Close。&lt;br&gt;如果写了之后还是打印log，请重新勾选对勾，就可以解决了。&lt;/p&gt;
&lt;h3 id=&quot;代码注释&quot;&gt;&lt;a href=&quot;#代码注释&quot; class=&quot;headerlink&quot; title=&quot;代码注释&quot;&gt;&lt;/a&gt;代码注释&lt;/h3&gt;&lt;p&gt;　　这个是因为苹果解决xcode ghost，把插件屏蔽了。&lt;br&gt;　　解决方法是打开终端，命令运行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ sudo /usr/libexec/xpccachectl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　　然后必须重启电脑后生效。&lt;/p&gt;
&lt;p&gt;　　注意：Xcode8内置了开启注释的功能 Editor-&amp;gt;Structure-&amp;gt;Add Documentation。&lt;br&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="http://xiniur.ga/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>dynamic与synthesize区别</title>
    <link href="http://xiniur.ga/2016/07/24/dynamic%E4%B8%8Esynthesize%E5%8C%BA%E5%88%AB/"/>
    <id>http://xiniur.ga/2016/07/24/dynamic与synthesize区别/</id>
    <published>2016-07-24T11:15:14.000Z</published>
    <updated>2016-11-22T03:30:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>##＃ @dynamic与@synthesize的区别<br>　　@property有两个对应的词，一个是@synthesize，一个是@dynamic，如果@synthesize和@dynamic都没有默认@synthesize。<br>　　@synthesize的语义是如果没有手动实现setter/getter方法，那么编辑器会自动为你加上这两个方法。<br>　　@dynamic是告诉编辑器，代码中用@dynamic修饰的属性，其setter/getter方法会在程序运行的时候或者其他方式动态绑定，以便让编译器通过编译，不自动生成setter/getter方法（对于readonly的属性只需提供getter方法即可）。假如一个属性被声明为@dynamic var，没有提供setter/getter方法，编译的时候没问题，但是当程序运行到instance.var = someVar，由于缺setter方法导致程序崩溃，或者当运行到someVar = var时，由于缺getter方法同样导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##＃ @dynamic与@synthesize的区别&lt;br&gt;　　@property有两个对应的词，一个是@synthesize，一个是@dynamic，如果@synthesize和@dynamic都没有默认@synthesize。&lt;br&gt;　　@synthesize的语义是
    
    </summary>
    
    
      <category term="iOS" scheme="http://xiniur.ga/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://xiniur.ga/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Markdown使用规则</title>
    <link href="http://xiniur.ga/2016/07/19/Markdown%E4%BD%BF%E7%94%A8%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/"/>
    <id>http://xiniur.ga/2016/07/19/Markdown使用语法规则/</id>
    <published>2016-07-19T09:34:14.000Z</published>
    <updated>2016-11-25T01:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>　　是一种轻量级标记语言，它的目标是实现易读易写。</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>　　如果一段文字被定义为标题，只要在这段文字前加#号即可。总共六级标题，使用几级标题在前面加多少个#号。（# 一级标题 ## 二级标题 ### 三级标题）。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>　　列表有有序列表与无序列表的区别，在Markdown下，列表的显示只需要在文字前加上-或*即可变为无序列表，有序列表则直接在文字前加（1. 2. 3. ）符号要和文字之间加一个字符的空格。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>　　如果需要引用一小段别处的内容只需要在文本前加入&gt;（符号与内容之间有空格）这种尖括号。</p>
<h3 id="显示阅读全文"><a href="#显示阅读全文" class="headerlink" title="显示阅读全文"></a>显示阅读全文</h3><p>　　在需要显示的地方添加<code>&lt;!--more--&gt;</code>那么就会在文中添加more的地方显示阅读全文。</p>
<a id="more"></a>
<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>　　如果你只想高亮语句中的某个函数名或关键字，可以使用 `函数名或关键字` 实现。<br>    通常编辑器根据代码片段适配合适的高亮方法，但你也可以用```代码块```包裹一段代码，并指定一种语言。<br><img src="/uploads/daimagaoliang1.png" alt="代码块"><br>　　支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml等，可参考highlight.js <code>node_modules/highlight.js/lib</code>。<br>　　也可以使用 4 空格缩进，再贴上代码，实现相同的的效果。<br><img src="/uploads/daimagaoliang2.png" alt="代码块"></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>　　使用| :——- | :——-: |生成表格，其中:是内容对齐方式。</p>
<pre><code>| student  | score     |
| :------- | :-------: |
| Bob      | 100       |
</code></pre><table>
<thead>
<tr>
<th style="text-align:left">student</th>
<th style="text-align:center">score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Bob</td>
<td style="text-align:center">100</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;　　是一种轻量级标记语言，它的目标是实现易读易写。&lt;/p&gt;
&lt;h3 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h3&gt;&lt;p&gt;　　如果一段文字被定义为标题，只要在这段文字前加#号即可。总共六级标题，使用几级标题在前面加多少个#号。（# 一级标题 ## 二级标题 ### 三级标题）。&lt;/p&gt;
&lt;h3 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h3&gt;&lt;p&gt;　　列表有有序列表与无序列表的区别，在Markdown下，列表的显示只需要在文字前加上-或*即可变为无序列表，有序列表则直接在文字前加（1. 2. 3. ）符号要和文字之间加一个字符的空格。&lt;/p&gt;
&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;　　如果需要引用一小段别处的内容只需要在文本前加入&amp;gt;（符号与内容之间有空格）这种尖括号。&lt;/p&gt;
&lt;h3 id=&quot;显示阅读全文&quot;&gt;&lt;a href=&quot;#显示阅读全文&quot; class=&quot;headerlink&quot; title=&quot;显示阅读全文&quot;&gt;&lt;/a&gt;显示阅读全文&lt;/h3&gt;&lt;p&gt;　　在需要显示的地方添加&lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt;那么就会在文中添加more的地方显示阅读全文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="http://xiniur.ga/tags/Markdown/"/>
    
      <category term="记录" scheme="http://xiniur.ga/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>我的博客</title>
    <link href="http://xiniur.ga/2016/05/10/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xiniur.ga/2016/05/10/我的博客/</id>
    <published>2016-05-10T02:02:30.000Z</published>
    <updated>2016-11-22T03:29:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　部署到github与coding配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo:</div><div class="line">      github: https://github.com/.../....github.io.git,master</div><div class="line">      coding: git@git.coding.net:.../....git,coding-pages</div><div class="line">  branch: master</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　部署到github与coding配置&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/
    
    </summary>
    
    
      <category term="hexo" scheme="http://xiniur.ga/tags/hexo/"/>
    
  </entry>
  
</feed>
